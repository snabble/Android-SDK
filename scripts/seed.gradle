apply plugin: 'de.undercouch.download'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

ext.endpoint=properties.getProperty('snabble.endpoint')
ext.projectId=properties.getProperty('snabble.projectId')
ext.clientToken=properties.getProperty('snabble.clientToken')
ext.metadataUrl="/api/${project.projectId}/metadata/app/android/testapp"

ext.appVersion = '1.0'

if(ext.endpoint == null) {
    throw new GradleException('You must specify snabble.endpoint in your local.properties')
}

if(ext.projectId == null) {
    throw new GradleException('You must specify snabble.projectId in your local.properties')
}

if(ext.clientToken == null) {
    throw new GradleException('You must specify snabble.clientToken in your local.properties')
}

task updateBundledData(
        group: 'seed',
        description: "Updates bundled app data, such as products and shop data") {
    doLast {
        downloadBundledData()
    }
}

task updateBundledDataIfNotExists {
    def productRevision = file('src/main/assets/products.revision')
    if(!productRevision.exists()) {
        doLast {
            downloadBundledData()
        }
    }
}

preBuild.dependsOn(updateBundledDataIfNotExists)

def downloadBundledData() {
    downloadMetadata(
            "${project.endpoint}${project.metadataUrl}",
            'src/main/assets/'
    )

    downloadProductDb(
            "${project.endpoint}/api/${project.projectId}/appdb",
            'src/main/assets/'
    )
}

def downloadMetadata(source, destination) {
    def fileName = destination + "metadata.json"

    download {
        src source
        dest fileName

        requestInterceptor = { request, context ->
            request.addHeader("Client-Token", project.clientToken)
        }
    }
}

def downloadProductDb(source, destination){
    download {
        src source
        dest destination + "products.sqlite3"

        requestInterceptor = { request, context ->
            request.addHeader("Client-Token", project.clientToken)
        }
    }

    def db = openSQLiteDatabase(file(destination + "products.sqlite3"))
    db.eachRow("SELECT value FROM metadata WHERE key = 'schemaVersionMajor'") { row ->
        def productRevision = file(destination + 'products.major')
        productRevision.text = row.getString(1)
    }

    db.eachRow("SELECT value FROM metadata WHERE key = 'schemaVersionMinor'") { row ->
        def productRevision = file(destination + 'products.minor')
        productRevision.text = row.getString(1)
    }

    db.eachRow("SELECT value FROM metadata WHERE key = 'revision'") { row ->
        def productRevision = file(destination + 'products.revision')
        productRevision.text = row.getString(1)
    }
}